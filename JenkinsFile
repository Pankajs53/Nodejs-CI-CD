pipeline {
  agent any // Use any available agent to run the pipeline

  environment {
    DOCKER_IMAGE = 'node:alpine'
  }

  stages {
    stage('Initialize') {
      steps {
        script {
          // Example: Print Docker path to verify
          def dockerPath = sh(script: 'which docker', returnStdout: true).trim()
          echo "Docker path: ${dockerPath}"
          // Optionally, you can set up environment variables or perform other initializations here
        }
      }
    }
    
    stage('Test') {
      agent {
        docker {
          image "${env.DOCKER_IMAGE}"
          args '-v /usr/src/app/node_modules'
        }
      }
      steps {
        sh 'node --version'
      }
    }

    stage('Build And Test') {
      agent {
        docker {
          image "${env.DOCKER_IMAGE}"
          args '-v /usr/src/app/node_modules'
        }
      }
      steps {
        sh 'ls -ltr'
        sh 'npm install --cache .npm'
      }
    }

    stage('Build And Push Docker Image') {
      environment{
          DOCKER_IMAGE = "pankajs53/nodejs-ci-cd:${BUILD_NUMBER}"
          REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
          // Run Docker build command directly on the Jenkins agent where Docker is installed
          sh 'echo Building Image'
          sh 'docker build -t ${DOCKER_IMAGE} .'
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
            dockerImage.push()
          }
        }
      }
    }
  }
}
